# Generated by Django 4.2.25 on 2025-10-24 20:03

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('role', models.CharField(choices=[('Student', 'Student'), ('Faculty', 'Faculty')], max_length=20)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Faculty',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='e.g., Professor, Associate Professor', max_length=255)),
                ('department', models.CharField(help_text='e.g., Computer Science, Mathematics', max_length=255)),
                ('is_hod', models.BooleanField(default=False, help_text='Determines if faculty sees Mentor queue or HOD queue')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='faculty_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Faculty',
                'verbose_name_plural': 'Faculty',
                'db_table': 'faculty',
            },
        ),
        migrations.CreateModel(
            name='AttendanceRequest',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date', models.DateField(help_text='Date of attendance request')),
                ('periods', models.JSONField(default=list, help_text='Array of period numbers [1-8] e.g., [1, 2, 3, 4]')),
                ('period_faculty_mapping', models.JSONField(default=dict, help_text="Mapping of period to faculty ID e.g., {'1': 'faculty-id-1', '2': 'faculty-id-2'}")),
                ('event_coordinator', models.CharField(help_text='Name of faculty coordinating the event', max_length=255)),
                ('proof_faculty', models.CharField(help_text='Name of faculty who can verify attendance', max_length=255)),
                ('purpose', models.TextField(help_text='Reason for attendance request (min 10 characters)', validators=[django.core.validators.MinLengthValidator(10)])),
                ('status', models.CharField(choices=[('PENDING_MENTOR', 'Pending (Mentor)'), ('PENDING_HOD', 'Pending (HOD)'), ('APPROVED', 'Approved'), ('DECLINED', 'Declined')], default='PENDING_MENTOR', max_length=20)),
                ('reason', models.TextField(blank=True, help_text='Required when status is DECLINED', null=True)),
                ('proof_url', models.URLField(blank=True, help_text='URL to uploaded proof document (future feature)', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('student', models.ForeignKey(limit_choices_to={'role': 'Student'}, on_delete=django.db.models.deletion.CASCADE, related_name='attendance_requests', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Attendance Request',
                'verbose_name_plural': 'Attendance Requests',
                'db_table': 'attendance_requests',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('student_id', models.CharField(help_text='University Student ID', max_length=50, unique=True)),
                ('department', models.CharField(max_length=255)),
                ('year', models.IntegerField(help_text='1, 2, 3, or 4')),
                ('section', models.CharField(help_text='e.g., A, B, C', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('mentor', models.ForeignKey(blank=True, help_text='Assigned faculty mentor', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='mentees', to='attendance.faculty')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='student_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Student',
                'verbose_name_plural': 'Students',
                'db_table': 'students',
                'indexes': [models.Index(fields=['student_id'], name='students_student_1ff8ed_idx'), models.Index(fields=['department'], name='students_departm_33c447_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='faculty',
            index=models.Index(fields=['department'], name='faculty_departm_62c77d_idx'),
        ),
        migrations.AddIndex(
            model_name='faculty',
            index=models.Index(fields=['is_hod'], name='faculty_is_hod_381292_idx'),
        ),
        migrations.AddIndex(
            model_name='attendancerequest',
            index=models.Index(fields=['student', 'status'], name='attendance__student_16a50b_idx'),
        ),
        migrations.AddIndex(
            model_name='attendancerequest',
            index=models.Index(fields=['status', 'date'], name='attendance__status_f84769_idx'),
        ),
        migrations.AddIndex(
            model_name='attendancerequest',
            index=models.Index(fields=['-created_at'], name='attendance__created_67836b_idx'),
        ),
    ]
